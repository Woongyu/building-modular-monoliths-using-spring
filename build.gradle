buildscript {
    ext {
        dependencyManagementVersion = '1.0.15.RELEASE'
        springBootVersion = '2.7.13'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        devOnly
        runtimeClasspath {
            extendsFrom devOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
        dependencies {

        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation 'org.slf4j:slf4j-api'
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile){
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }
}

project(':commons') {
    dependencies {
        implementation 'org.springframework:spring-context'
        implementation 'org.springframework:spring-context-support'
    }
}

project(':catalogs') {
    dependencies {
        implementation project(':commons')

        implementation 'org.springframework:spring-webmvc'
        implementation 'org.springframework.boot:spring-boot-autoconfigure'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
}

project(':orders') {
    dependencies {
        implementation project(':commons')

        implementation 'org.springframework:spring-webmvc'
        implementation 'org.springframework.boot:spring-boot-autoconfigure'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
}

project(':shipments') {
    dependencies {
        implementation project(':commons')

        implementation 'org.springframework:spring-webmvc'
        implementation 'org.springframework.boot:spring-boot-autoconfigure'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
}

project(':modular-monoliths') {
    apply plugin: 'org.springframework.boot'

    dependencies {
        implementation project(':commons')
        implementation project(':catalogs')
        implementation project(':orders')
        implementation project(':shipments')

        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        developmentOnly 'org.springframework.boot:spring-boot-devtools'
    }
}